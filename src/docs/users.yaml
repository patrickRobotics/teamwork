paths:
  /auth/signin/:
    post:
      tags:
        - Auth
      summary: 'Allow users to log in, and to receive a Token'
      produces: '-application/json'
      parameters:
        -
          in: body
          name: body
          description: 'The email/password'
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: 'Login Success'
          schema:
            $ref: '#/definitions/Token'
        '400':
          description: 'Error with your request'
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Bad credentials OR if user can not login'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'The user is not found'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'A server error occurred'
          schema:
            $ref: '#/definitions/Error'
  /auth/create-user/:
    post:
      tags:
        - User
      summary: 'Admin creates a new user'
      produces:
        - application/json
      security:
        -
          Bearer: []
      parameters:
        -
          in: body
          name: 'Create new user'
          description: 'It enables an admin to add a new user account'
          required: false
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '201':
          description: 'An object with user details'
          schema:
            $ref: '#/definitions/User'
        '401':
          description: 'Unauthorized operation'
          schema:
            $ref: '#/definitions/Error'
  /auth/users/:
    get:
      tags:
        - User
      summary: 'Get list of user'
      produces:
        - application/json
      security:
        - Bearer: []
      parameters: []
      responses:
        '200':
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          description: 'Unauthorized operation'
          schema:
            $ref: '#/definitions/Error'
  /auth/users/{userId}:
    get:
      tags:
        - User
      summary: 'Get user by id'
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: Numeric ID of the user to get.
      responses:
        '200':
          description: User object
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          description: 'Unauthorized operation'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'User not found'
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      summary: 'Admin update an existing user'
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: Numeric ID of the user to update.
      responses:
        '200':
          description: User object
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          description: 'Unauthorized operation'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'User specified by id does not exist'
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      summary: 'Admin delete an existing user'
      produces:
        - application/json
      security:
        - Bearer: []
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: Numeric ID of the user to delete.
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Success'
        '401':
          description: 'Unauthorized operation'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'User specified by id does not exist'
          schema:
            $ref: '#/definitions/Error'

definitions:
  Login:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  Token:
    type: object
    properties:
      status:
        type: string
      data:
        type: object
        properties:
          token:
            type: string
          id:
            type: string
          email:
            type: string
          password:
            type: string
  Error:
    type: object
    properties:
      status:
        type: string
      error:
        type: string
  Success:
    type: object
    properties:
      status:
        type: string
      message:
        type: string
  UserCreate:
    type: object
    properties:
      user:
        type: object
        properties:
          first_name:
            type: string
          lasst_name:
            type: string
          email:
            type: string
          password:
            type: string
          gender:
            type: string
          is_admin:
            type: boolean
          department:
            type: string
          address:
            type: string
  User:
    type: object
    properties:
      id:
        type: integer
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      is_admin:
        type: boolean
      gender:
        type: string
      department:
        type: string
      address:
        type: string
      createdon:
        type: string
        format: date
